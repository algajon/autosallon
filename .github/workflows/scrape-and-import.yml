name: Scrape & Import (Hostinger via SSH tunnel)

on:
  workflow_dispatch:
  schedule:
    - cron: "17 * * * *"

permissions:
  contents: read

concurrency:
  group: scrape-import
  cancel-in-progress: false

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    env:
      TUNNEL_HOST: 127.0.0.1
      TUNNEL_PORT: 3307
      CSV_DIR: ${{ secrets.CSV_DIR != '' && secrets.CSV_DIR || 'scripts' }}
      CSV_NAME: cars.csv
      KRW_EUR: ${{ secrets.KRW_EUR != '' && secrets.KRW_EUR || '0.000615' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install system deps (MySQL client, SSH)
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client openssh-client

      - name: Prepare SSH key (key-only; no password)
        env:
          SSH_KEY: ${{ secrets.HOSTINGER_SSH_KEY }}
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          if ! ssh-keygen -y -f ~/.ssh/id_ed25519 >/dev/null 2>&1; then
            echo "HOSTINGER_SSH_KEY is invalid or passphrase-protected."
            exit 1
          fi
          cat > ~/.ssh/config <<'CFG'
          Host *
            ServerAliveInterval 30
            ServerAliveCountMax 3
            IdentitiesOnly yes
            PreferredAuthentications publickey
            PasswordAuthentication no
            StrictHostKeyChecking no
          CFG

      - name: Sanity check from SSH host → Hostinger MySQL
        env:
          SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          DB_NAME:  ${{ secrets.DB_DATABASE }}     # exact prefixed name from hPanel
          DB_USER:  ${{ secrets.DB_USERNAME }}     # exact prefixed user from hPanel
          DB_PASS:  ${{ secrets.DB_PASSWORD }}
        run: |
          set -euo pipefail
          # Try the login **from the SSH server** (no tunnel involved)
          ssh -o IdentitiesOnly=yes -i ~/.ssh/id_ed25519 -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "
            MYSQL_PWD='${DB_PASS}' mysql --protocol=TCP \
              -h srv1802.hstgr.io -u '${DB_USER}' -e 'SELECT VERSION(), CURRENT_USER(), USER();' '${DB_NAME}'
          "

      - name: Upload CSV to SSH host
        env:
          SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
        run: |
          set -euo pipefail
          REMOTE_CSV="/tmp/encar_${GITHUB_RUN_ID}_${GITHUB_RUN_ATTEMPT}.csv"
          scp -P "$SSH_PORT" -i ~/.ssh/id_ed25519 "${{ env.CSV_DIR }}/${{ env.CSV_NAME }}" \
              "${SSH_USER}@${SSH_HOST}:${REMOTE_CSV}"
          echo "REMOTE_CSV=$REMOTE_CSV" >> "$GITHUB_ENV"

      - name: Import CSV on SSH host → Hostinger MySQL
        env:
          SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          DB_NAME:  ${{ secrets.DB_DATABASE }}
          DB_USER:  ${{ secrets.DB_USERNAME }}
          DB_PASS:  ${{ secrets.DB_PASSWORD }}
        run: |
          set -euo pipefail
          ssh -o IdentitiesOnly=yes -i ~/.ssh/id_ed25519 -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" bash -s <<'REMOTE'
          set -euo pipefail
          DB_HOST="srv1802.hstgr.io"
          CSV_PATH="${REMOTE_CSV}"

          # Ensure mysql client is present
          command -v mysql >/dev/null 2>&1 || { sudo apt-get update && sudo apt-get install -y mysql-client; }

          echo "MySQL ping/version (from SSH host):"
          MYSQL_PWD="$DB_PASS" mysql --protocol=TCP --ssl-mode=REQUIRED \
            -h "$DB_HOST" -u "$DB_USER" -e "SELECT VERSION(), CURRENT_USER(), USER();" "$DB_NAME"

          MYSQL_PWD="$DB_PASS" mysql --protocol=TCP --ssl-mode=REQUIRED --local-infile=1 \
            -h "$DB_HOST" -u "$DB_USER" "$DB_NAME" <<SQL
          DROP TABLE IF EXISTS stg_encar;
          CREATE TABLE stg_encar (
            prodhuesi        VARCHAR(80),
            modeli           VARCHAR(120),
            varianti         VARCHAR(160),
            viti             VARCHAR(8),
            cmimi_eur        INT,
            kilometrazhi_km  INT,
            karburanti       VARCHAR(40),
            ngjyra           VARCHAR(40),
            transmisioni     VARCHAR(40),
            uleset           VARCHAR(8),
            vin              VARCHAR(40),
            engine_cc        INT,
            images           TEXT,
            listing_url      VARCHAR(512),
            opsionet         MEDIUMTEXT,
            raporti_url      TEXT
          ) DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

          LOAD DATA LOCAL INFILE '${CSV_PATH}'
          INTO TABLE stg_encar
          CHARACTER SET utf8mb4
          FIELDS TERMINATED BY ','  ENCLOSED BY '\"'
          LINES TERMINATED BY '\n'
          IGNORE 1 LINES
          (prodhuesi, modeli, varianti, viti, cmimi_eur, kilometrazhi_km, karburanti, ngjyra,
           transmisioni, uleset, vin, engine_cc, images, listing_url, opsionet, raporti_url);

          CREATE TABLE IF NOT EXISTS vehicles LIKE stg_encar;
          ALTER TABLE vehicles ADD UNIQUE KEY IF NOT EXISTS uniq_listing_url (listing_url(255));

          INSERT INTO vehicles (
            prodhuesi, modeli, varianti, viti, cmimi_eur, kilometrazhi_km, karburanti, ngjyra,
            transmisioni, uleset, vin, engine_cc, images, listing_url, opsionet, raporti_url
          )
          SELECT
            prodhuesi, modeli, varianti, viti, cmimi_eur, kilometrazhi_km, karburanti, ngjyra,
            transmisioni, uleset, vin, engine_cc, images, listing_url, opsionet, raporti_url
          FROM stg_encar
          ON DUPLICATE KEY UPDATE
            prodhuesi=VALUES(prodhuesi),
            modeli=VALUES(modeli),
            varianti=VALUES(varianti),
            viti=VALUES(viti),
            cmimi_eur=VALUES(cmimi_eur),
            kilometrazhi_km=VALUES(kilometrazhi_km),
            karburanti=VALUES(karburanti),
            ngjyra=VALUES(ngjyra),
            transmisioni=VALUES(transmisioni),
            uleset=VALUES(uleset),
            vin=VALUES(vin),
            engine_cc=VALUES(engine_cc),
            images=VALUES(images),
            opsionet=VALUES(opsionet),
            raporti_url=VALUES(raporti_url);
          SQL

          rm -f -- "${CSV_PATH}"
          REMOTE
