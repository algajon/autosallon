name: Scrape & Import (Hostinger via SSH tunnel)

on:
  workflow_dispatch:
  schedule:
    - cron: "17 * * * *"

permissions:
  contents: read

concurrency:
  group: scrape-import
  cancel-in-progress: false

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    env:
      TUNNEL_HOST: 127.0.0.1
      TUNNEL_PORT: 3307
      CSV_DIR: ${{ secrets.CSV_DIR != '' && secrets.CSV_DIR || 'scripts' }}
      CSV_NAME: cars.csv
      KRW_EUR: ${{ secrets.KRW_EUR != '' && secrets.KRW_EUR || '0.000615' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install system deps (MySQL client, SSH)
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client openssh-client

      - name: Prepare SSH key (key-only; no password)
        env:
          SSH_KEY: ${{ secrets.HOSTINGER_SSH_KEY }}
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          if ! ssh-keygen -y -f ~/.ssh/id_ed25519 >/dev/null 2>&1; then
            echo "HOSTINGER_SSH_KEY is invalid or passphrase-protected."
            exit 1
          fi
          cat > ~/.ssh/config <<'CFG'
          Host *
            ServerAliveInterval 30
            ServerAliveCountMax 3
            IdentitiesOnly yes
            PreferredAuthentications publickey
            PasswordAuthentication no
            StrictHostKeyChecking no
          CFG

      - name: Sanity SSH auth
        env:
          SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
        run: |
          set -e
          ssh -vvv -o IdentitiesOnly=yes -i ~/.ssh/id_ed25519 \
            -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "echo 'SSH OK'; exit"

      - name: Start SSH tunnel (runner:3307 → bastion → Hostinger MySQL over IPv4)
        env:
          SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}        # 46.202.156.167
          SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          REMOTE_DB_HOST: ${{ secrets.REMOTE_DB_HOST }}      # 92.113.22.50
        run: |
          set -euo pipefail
          # Force IPv4 end-to-end and forward to Hostinger DB IPv4
          ssh -f -N -4 \
            -o ExitOnForwardFailure=yes \
            -o IdentitiesOnly=yes -i ~/.ssh/id_ed25519 \
            -L ${TUNNEL_PORT}:${REMOTE_DB_HOST}:3306 \
            -p "${SSH_PORT}" "${SSH_USER}@${SSH_HOST}"
          for i in {1..20}; do
            if ss -lnt | grep -q ":${TUNNEL_PORT}"; then
              echo "Tunnel up: ${TUNNEL_HOST}:${TUNNEL_PORT} -> ${REMOTE_DB_HOST}:3306 via ${SSH_HOST}"
              exit 0
            fi
            sleep 0.5
          done
          echo "Tunnel did not open" >&2
          exit 1

      # === Your scraper (writes CSV to $CSV_DIR/$CSV_NAME) ===
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Prepare unique Chrome profile dir
        run: |
          echo "CHROME_USER_DATA_DIR=$RUNNER_TEMP/chrome-${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}" >> $GITHUB_ENV
          mkdir -p "$RUNNER_TEMP/chrome-${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}"

      - name: Clean stale Chrome (best-effort)
        run: |
          pkill -f chrome || true
          pkill -f chromedriver || true

      - name: Install Python requirements
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run scraper
        env:
          KRW_EUR: ${{ env.KRW_EUR }}
        run: |
          set -euo pipefail
          mkdir -p "$CSV_DIR"
          python scripts/github.py
          test -s "${CSV_DIR}/${CSV_NAME}" || (echo "CSV not found at ${CSV_DIR}/${CSV_NAME}" >&2; exit 1)
          ls -lh "${CSV_DIR}/${CSV_NAME}"

      # === MySQL import (explicit -p so we 100% send a password) ===
      - name: Import CSV into MySQL (UPSERT)
        env:
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          set -euo pipefail
          [[ -n "${DB_DATABASE:-}" ]] || { echo "DB_DATABASE missing"; exit 1; }
          [[ -n "${DB_USERNAME:-}" ]] || { echo "DB_USERNAME missing"; exit 1; }
          [[ -n "${DB_PASSWORD:-}" ]] || { echo "DB_PASSWORD missing"; exit 1; }

          HOST="${TUNNEL_HOST}"
          PORT="${TUNNEL_PORT}"
          CSV_PATH="$(pwd)/${CSV_DIR}/${CSV_NAME}"

          echo "MySQL ping/version:"
          mysql --protocol=TCP --ssl-mode=REQUIRED \
            -h "$HOST" -P "$PORT" -u "$DB_USERNAME" -p"$DB_PASSWORD" \
            -e "SELECT VERSION() AS version, CURRENT_USER() AS current_user, USER() AS login_user;" "$DB_DATABASE"

          mysql --protocol=TCP --ssl-mode=REQUIRED \
            -h "$HOST" -P "$PORT" -u "$DB_USERNAME" -p"$DB_PASSWORD" "$DB_DATABASE" <<'SQL'
          DROP TABLE IF EXISTS stg_encar;
          CREATE TABLE stg_encar (
            prodhuesi        VARCHAR(80),
            modeli           VARCHAR(120),
            varianti         VARCHAR(160),
            viti             VARCHAR(8),
            cmimi_eur        INT,
            kilometrazhi_km  INT,
            karburanti       VARCHAR(40),
            ngjyra           VARCHAR(40),
            transmisioni     VARCHAR(40),
            uleset           VARCHAR(8),
            vin              VARCHAR(40),
            engine_cc        INT,
            images           TEXT,
            listing_url      VARCHAR(512),
            opsionet         MEDIUMTEXT,
            raporti_url      TEXT
          ) DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
          SQL

          mysql --protocol=TCP --ssl-mode=REQUIRED \
            -h "$HOST" -P "$PORT" -u "$DB_USERNAME" -p"$DB_PASSWORD" --execute="
            SET SESSION local_infile=1;
            LOAD DATA LOCAL INFILE '${CSV_PATH}'
            INTO TABLE stg_encar
            CHARACTER SET utf8mb4
            FIELDS TERMINATED BY ','  ENCLOSED BY '\"'
            LINES TERMINATED BY '\n'
            IGNORE 1 LINES
            (prodhuesi, modeli, varianti, viti, cmimi_eur, kilometrazhi_km, karburanti, ngjyra,
             transmisioni, uleset, vin, engine_cc, images, listing_url, opsionet, raporti_url);
          " "$DB_DATABASE"

          mysql --protocol=TCP --ssl-mode=REQUIRED \
            -h "$HOST" -P "$PORT" -u "$DB_USERNAME" -p"$DB_PASSWORD" -e \
            "CREATE TABLE IF NOT EXISTS vehicles LIKE stg_encar;" "$DB_DATABASE"

          HAS_IDX="$(mysql --protocol=TCP --ssl-mode=REQUIRED \
            -h "$HOST" -P "$PORT" -u "$DB_USERNAME" -p"$DB_PASSWORD" -N -B -e \
            "SELECT COUNT(1) FROM information_schema.statistics
             WHERE table_schema = DATABASE() AND table_name='vehicles' AND index_name='uniq_listing_url';" "$DB_DATABASE")"
          if [ "$HAS_IDX" -eq 0 ]; then
            mysql --protocol=TCP --ssl-mode=REQUIRED \
              -h "$HOST" -P "$PORT" -u "$DB_USERNAME" -p"$DB_PASSWORD" -e \
              "ALTER TABLE vehicles ADD UNIQUE KEY uniq_listing_url (listing_url(255));" "$DB_DATABASE"
          fi

          mysql --protocol=TCP --ssl-mode=REQUIRED \
            -h "$HOST" -P "$PORT" -u "$DB_USERNAME" -p"$DB_PASSWORD" "$DB_DATABASE" <<'SQL'
          INSERT INTO vehicles (
            prodhuesi, modeli, varianti, viti, cmimi_eur, kilometrazhi_km, karburanti, ngjyra,
            transmisioni, uleset, vin, engine_cc, images, listing_url, opsionet, raporti_url
          )
          SELECT
            prodhuesi, modeli, varianti, viti, cmimi_eur, kilometrazhi_km, karburanti, ngjyra,
            transmisioni, uleset, vin, engine_cc, images, listing_url, opsionet, raporti_url
          FROM stg_encar
          ON DUPLICATE KEY UPDATE
            prodhuesi=VALUES(prodhuesi),
            modeli=VALUES(modeli),
            varianti=VALUES(varianti),
            viti=VALUES(viti),
            cmimi_eur=VALUES(cmimi_eur),
            kilometrazhi_km=VALUES(kilometrazhi_km),
            karburanti=VALUES(karburanti),
            ngjyra=VALUES(ngjyra),
            transmisioni=VALUES(transmisioni),
            uleset=VALUES(uleset),
            vin=VALUES(vin),
            engine_cc=VALUES(engine_cc),
            images=VALUES(images),
            opsionet=VALUES(opsionet),
            raporti_url=VALUES(raporti_url);
          SQL
